MEMORY {
	# First 28 bytes of the zero page are used by NES library

    ZP: start = $28, size = $d8, type = rw, define = yes;

    # INES Cartridge Header

    HEADER: start = $0, size = $10, file = %O ,fill = yes;

    # 2 16K ROM Banks
    # - startup
    # - code
    # - rodata
    # - data (load)

  PRG0:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRG1:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRG2:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRG3:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRG4:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRG5:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRG6:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRG7:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRG8:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRG9:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRGA:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRGB:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRGC:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRGD:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRGE:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, define = yes;
  PRGF:  start = $C000, size = $4000, type = ro, file = %O, fill=yes, define = yes;


    #PRG: start = $8000, size = $3f00, file = %O ,fill = yes, define = yes;

	  # NROM256
	  # PRG: start = $8000, size = $7f00, file = %O ,fill = yes, define = yes;

	# DPCM Samples at end of the ROM

    DMC: start = $7f00, size = $fa, file = %O, fill = yes;

	  # NROM256
	  # DMC: start = $ff00, size = $fa, file = %O, fill = yes;

    # Hardware Vectors at end of the ROM

    #VECTORS: start = $7ffa, size = $6, file = %O, fill = yes;

	  # NROM256
	  # VECTORS: start = $fffa, size = $6, file = %O, fill = yes;

    # 1 8K CHR Bank

    CHR: start = $0000, size = $2000, file = %O, fill = yes;

    # standard 2K SRAM (-zeropage)
    # $0100 famitone, palette, cpu stack
	# $0200 oam buffer
	# $0300..$800 ca65 stack

    RAM: start = $0300, size = $0500, define = yes;

	  # Use this definition instead if you going to use extra 8K RAM
	  # RAM: start = $6000, size = $2000, define = yes;
}

SEGMENTS {
    HEADER:  load = HEADER, type = ro, align = $10;
    STARTUP:  load = PRGF,            type = ro,  define = yes;
    LOWCODE:  load = PRGF,            type = ro,                optional = yes;
    INIT:     load = PRGF,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRGF,            type = ro,  define = yes;
    RODATA:   load = PRGF,            type = ro,  define = yes;
    DATA:     load = PRG0, run = RAM, type = rw,  define = yes;
    #VECTORS:  load = VECTORS,        type = rw;
    #SAMPLES:  load = DMC,            type = rw;
    #CHARS:    load = CHR,            type = rw;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;


  BANK0:     load = PRG0, type = ro, align = $100;
#  BANK0_END:     load = PRG0, type = ro, start= $C000;

  BANK1:     load = PRG1, type = ro, align = $100;
#  BANK1_END:     load = PRG1, type = ro, start= $C000;

  BANK2:     load = PRG2, type = ro, align = $100;
#  BANK2_END:     load = PRG2, type = ro, start= $C000;

  BANK3:     load = PRG3, type = ro, align = $100;
#  BANK3_END:     load = PRG3, type = ro, start= $C000;

  BANK4:     load = PRG4, type = ro, align = $100;
#  BANK4_END:     load = PRG4, type = ro, start= $C000;

  BANK5:     load = PRG5, type = ro, align = $100;
#  BANK5_END:     load = PRG5, type = ro, start= $C000;

  BANK6:     load = PRG6, type = ro, align = $100;
#  BANK6_END:     load = PRG6, type = ro, start= $C000;

  BANK7:     load = PRG7, type = ro, align = $100;
#  BANK7_END:     load = PRG7, type = ro, start= $C000;

  BANK8:     load = PRG8, type = ro, align = $100;
#  BANK8_END:     load = PRG8, type = ro, start= $C000;

  BANK9:     load = PRG9, type = ro, align = $100;
#  BANK9_END:     load = PRG9, type = ro, start= $C000;

  BANKA:     load = PRGA, type = ro, align = $100;
#  BANKA_END:     load = PRGA, type = ro, start= $C000;

  BANKB:     load = PRGB, type = ro, align = $100;
#  BANKB_END:     load = PRGB, type = ro, start= $C000;

  BANKC:     load = PRGC, type = ro, align = $100;
#  BANKC_END:     load = PRGC, type = ro, start= $C000;

  BANKD:     load = PRGD, type = ro, align = $100;
#  BANKD_END:     load = PRGD, type = ro, start= $C000;

  BANKE:     load = PRGE, type = ro, align = $100;
#  BANKE_END:     load = PRGE, type = ro, start= $C000;

  BANKF:     load = PRGF, type = ro, align = $100; 
  VECTORS:  load = PRGF, type = ro, start = $FFFA;
}



FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}

SYMBOLS {
    __STACKSIZE__ = $0500;  	# 5 pages stack
}

